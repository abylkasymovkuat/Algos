package Kon;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;

public class Graph {

    int [][] arr;
    int V, U;
    boolean [][] bArr;
    
    public Graph (int V){
        this.V = V;
        this.U = V;
        arr = new int[V+2][U+2];
        bArr = new boolean[V+2][U+2];
    }

    public void addEdge(int src, int dst){
        this.arr[src][dst] = 1;
    }
      public int getAllGryadkas() {
    	int cnt = 0;
    	for ( int i=1;i<=V;i++) {
     		for ( int j=1;j<=U;j++) 
     		{
     			if(arr[i][j]==1 && bArr[i][j]==false) 
     			{
     				BFS(i,j);
     				cnt++;
     			}
     		}}
    	return cnt;
     
    }
   
    public void BFS(int u, int v, int x , int y ) {
    	
    	
    	
    	
    	
    	if(u==x && v == y) {
    		return;
    	}
    	
    	 LinkedList<Integer> queue = new LinkedList<Integer>();
    	 
    	 bArr[u][v]= true;
         queue.add(u);
         queue.add(v);
         
         while (queue.size() != 0)
         {
            
            
        	 int s = queue.poll();
        	 int t = queue.poll();
             System.out.print(arr[t][s]+" ");
  
             // Get all adjacent vertices of the dequeued vertex s
             // If a adjacent has not been visited, then mark it
             // visited and enqueue it
             
           
             while (i.hasNext())
             {
                 int n = i.next();
                 if (!visited[n])
                 {
                     visited[n] = true;
                     queue.add(n);
                 }
             }
         }
    	
         for ( int i=0;i<4;i++) {
        	 for ( int j=0;j<2;j++) 
        	 {
        		 
        	 }
         }
    	
//    	if(arr[u-1][v]==0||bArr[u-1][v]==true ) 
//    	{
//       	   if(arr[u+1][v]==0||bArr[u+1][v]==true) {
//    		  if (arr[u][v-1]==0||bArr[u][v-1]==true) 
//    		  {
//    			 if(arr[u][v+1]==0||bArr[u][v+1]==true) 
//    			 {
//    				 return;
//    			 }
//    		  }
//    	   }
//    	 }
    	 
    	
    	
    	
    	if(arr[u-1][v-2]==1 && bArr[u-1][v-2]==false) {
    		BFS(u-1, v-2, x, y);
    	}
    	 if(arr[u+1][v-2]==1 && bArr[u+1][v-2]==false) {
    		BFS(u+1, v-2, x, y);
    	}
    	 if(arr[u-2][v-1]==1 && bArr[u-2][v-1]==false) {
    		BFS(u-2, v-1, x, y);
    	}
    	 if(arr[u-2][v+1]==1 && bArr[u-2][v+1]==false) {
    		BFS(u-2, v+1, x, y);
    	}
    	 if(arr[u-1][v+2]==1 && bArr[u-1][v+2]==false) {
     		BFS(u-1, v+2,x,y);
     	}
     	 if(arr[u+1][v+2]==1 && bArr[u+1][v+2]==false) {
     		BFS(u+1, v+2,x,y);
     	}
     	 if(arr[u+2][v-1]==1 && bArr[u+2][v-1]==false) {
     		BFS(u+2, v-1,x,y);
     	}
     	 if(arr[u+2][v+1]==1 && bArr[u+2][v+1]==false) {
     		BFS(u+2, v+1,x,y);
     	}
    	
    	
    }
    
    
   
    
    public static void main(String args[]){

   
        Scanner sc = new Scanner(System.in);
//     	int V = sc.nextInt();
//     	int U = sc.nextInt();
        
        String sss = sc.nextLine();
        int V = Integer.parseInt(sss.split(" ")[0]);
        //int U = Integer.parseInt(sss.split(" ")[1]);
        Graph adMatrix = new Graph(V);
        
      //  System.out.println(V+" "+U);
        for ( int i=0;i<V;i++) 
        {
        	String ss = sc.nextLine();
        	for ( int j=0;j<ss.length();j++) 
        	{
        	  if(ss.charAt(j)=='#')
        	  adMatrix.addEdge(i+1,j+1);	
        	}
        }
        
        
//        adMatrix.printAll();
       //	 adMatrix.printMat();
       
       System.out.println(adMatrix.getAllGryadkas());
       
       // adMatrix.printGryadka();
        
      // System.out.println(adMatrix.isTherePath(1,4)? "PORTOS":"ZOSOS");

    }
}


























