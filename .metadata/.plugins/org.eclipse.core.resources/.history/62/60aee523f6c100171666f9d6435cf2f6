package DirectedDFS;
import java.util.*;
 
public class Graph
{
   
    
        int V; 
         
        LinkedList<Integer>[] adj; 
         
      
        Graph(int V)
        {
            this.V = V;
            adj = new LinkedList[V+1];
             
            for (int i = 1; i <= V; i++)
                adj[i] = new LinkedList<Integer>();
             
        }
         
      
        void addEdge(int v, int w)
        {
            adj[v].addFirst(w); 
        }
         
       
        void DFS(int s)
        {
         
            Vector<Boolean> visited = new Vector<Boolean>(V+1);
            for (int i = 1; i <= V; i++)
                visited.add(false);
     
            // Create a stack for DFS
            Stack<Integer> stack = new Stack<>();
             
            // Push the current source node
            stack.push(s);
             
            while(stack.empty() == false)
            {
                // Pop a vertex from stack and print it
                s = stack.peek();
                stack.pop();
                 
                // Stack may contain same vertex twice. So
                // we need to print the popped item only
                // if it is not visited.
               
                
                if(visited.get(s) == false)
                {
                    System.out.print(s + " ");
                    visited.set(s, true);
                }
                
                 
                // Get all adjacent vertices of the popped vertex s
                // If a adjacent has not been visited, then puah it
                // to the stack.
                //Iterator<Integer> itr = adj[s].iterator();
                 
                for ( int i=0;i<adj[s].size();i++) 
                {
                	int v = adj[s].get(i);
                	if(!visited.get(v)){
                	    stack.push(v);
                	}
                }
                
             
                 
            }
           
        }
        public static void main(String[] args) 
        {
            // Total 5 vertices in graph
            Graph g = new Graph(5);
             
            g.addEdge(2, 1);
            g.addEdge(1, 3);
            g.addEdge(3, 2);
            g.addEdge(1, 4);
            g.addEdge(2, 5);
                 
        
            g.DFS(1);
        }
    
     
    
   
}